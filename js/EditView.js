// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['backbone', 'underscore', 'backbone-validation-amd'], function(Backbone, _) {
  var EditView;
  EditView = (function(_super) {
    __extends(EditView, _super);

    EditView.prototype.tagName = 'form';

    EditView.prototype.attributes = {
      'action': '#'
    };

    EditView.prototype.mafaka = {};

    EditView.prototype.template = _.template($('#editInfo').html());

    EditView.prototype.mod = {};

    EditView.prototype.events = {
      'click #saveButton': 'saveClicked',
      'click #closeButton': 'closeClicked'
    };

    function EditView() {
      EditView.__super__.constructor.apply(this, arguments);
      Backbone.Validation.bind(this);
      this.model.on('validated:invalid', this.invalid, this);
    }

    EditView.prototype.invalid = function(model, errors) {
      var key, value, _results;
      this.$('ul').addClass('editError');
      this.$('span').empty();
      _results = [];
      for (key in errors) {
        value = errors[key];
        _results.push(this.$("#" + key + "Span").text(value));
      }
      return _results;
    };

    EditView.prototype.saveClicked = function() {
      this.mod.name = this.$('#name').val();
      this.mod.lastName = this.$('#lastName').val();
      this.mod.gender = this.$('#gender').val();
      this.mod.age = this.$('#age').val();
      this.mod.phoneNumber = this.$('#phoneNumber').val();
      if (this.model.set(this.mod, {
        validate: true
      })) {
        this.$('ul').removeClass('editError');
        return this.remove();
      }
    };

    EditView.prototype.closeClicked = function() {
      this.model.trigger('itemClicked');
      return this.remove();
    };

    EditView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return EditView;

  })(Backbone.View);
  return EditView;
});

/*
//@ sourceMappingURL=EditView.map
*/
